 ____       _       _     _
| __ ) _ __(_) __ _| |__ | |_ _ __ ___   __ _ _ __ ___
|  _ \| '__| |/ _` | '_ \| __| '_ ` _ \ / _` | '__/ _ \
| |_) | |  | | (_| | | | | |_| | | | | | (_| | | |  __/
|____/|_|  |_|\__, |_| |_|\__|_| |_| |_|\__,_|_|  \___|
Przewodnik    |___/           po sygnaturach i modułach

1. Moduły pomocnicze

  1.1. Moduł *ListEx* -- <listEx.ml>, <listEx.mli>
    Udostępnia funkcje:
      -- znajdujące minimum/maksimum na liście:
         [min], [max], [min_map], [max_map]
      -- tworzącą listę o zadanej długości: [make]
      -- inne funkcje zaimportowane ze standardowego modułu List

  1.2. Moduł *StrEx* <strEx.ml>, <strEx.mli>
    Udostępnia funkcje:
      -- zamieniającą napis na listę znaków, z których się składa: [as_list]
      -- łączącą dwa napisy: [( ++ )]
      -- zwielokrotniającą znak: [( ** )]
      -- zwielokrotniającą napis: [( **! )]
      -- inne funkcje zaimportowane ze standardowych modułów *String*
         oraz *Str*

  1.3. Moduły *Unicore* i *Unicore_convert* -- <unicore.ml>, <unicore.mli>,
       <unicore_convert.ml>, <unicore_convert.mli>
    Udostępniają funkcje:
      -- dającą napis składający się z jednego znaku zakodowanego w UTF-8
         o zadanym kodzie: [utf8char_of_int]
      -- zamieniająca znak zakodowany w ISO-8859-1 na jednoznakowy napis
         zakodowany w UTF-8: [utf8char_of_char]
      -- dającą ilość znaków napisu zakodowanego w UTF-8:
         [utf8string_length]
      -- dającą reprezentację znaku o zadanym kodzie w napisach ASCII:
         [ascii_of_int]
    Moduł *Unicore_convert* zależy od modułu *Dictionary*.

  1.4. Moduł *Locale* -- <locale.c>, <locale.mli>
    Moduł udostępnia funkcję [charmap], która zwraca nazwę systemu kodowania
    znaków odpowiedniego dla aktualnego locale.

2. Unikod

  2.1. Sygatura UNICODE -- <signatures.ml>
    Moduł o takiej sygnaturze udostępnia:
      -- typ [wchar] i [t] = [wstring]: znak i napis unikodowy
      -- funkcje konwersji do znaków unikodowych: [wchar_of_int] oraz
         [wchar_of_char]
      -- funkcję konwertujące do/z zwykłych napisów: [from_string] oraz
         [to_string]
      -- pusty napis unikodowy: [empty]
      -- funkcję dającą długość napisu: [length]
      -- funkcje [( ++ )] oraz [( ** )] analogiczne do tych z modułu *StrEx*

    To jak powinny być zakodowane napisy wejściowe, jak również to jak są
    zakodowane napisy wyjściowe zależy od implementacji.

  2.2. Moduł *Unicode* : *UNICODE* -- <unicode.ml>
    Najprotsza implementacja sygnatury *UNICODE*:
      -- oczekuje napisów zakodowanych w ISO-8859-1 lub UTF-8 (w zależności
         od locale),
      -- zwraca napisy zakodowane w UTF-8.
    Zależy od modułów: *Locale*, *Unicore*

  2.3. Moduł *Unicode_ascii* : *UNICODE* -- <unicode_ascii.ml>
    Implementacja standardowa:
      -- oczekuje napisów zakodowanych w ISO-8859-1 lub UTF-8 (w zależności
         od locale),
      -- zwraca napisy zakodowane w ASCII.
    Konwersję obsługuje moduł *Unicore_convert*.
    Zależy od modułów: *Locale*, *Unicore*, *Unicore_convert*.

  2.4. Moduł *Unicode_konwert* : *UNICODE* -- <unicode_konwert.ml>
    Implementacja za pomocą zewnętrznego konwertera:
      -- oczekuje i zwraca napisy zakodowane w ISO-8859-n lub UTF-8
         (w zależności od locale).
    Konwersję przeprowadza zewnętrzny program `konwert'
    (<http://qrczak.ids.net.pl/programy/linux/konwert/>).
    Zależy od modułów: *Locale*, *Unicore*.

  2.5. Moduł *Unicode_html* : *UNICODE* -- <unicode_html.ml>
    Implementacja na potrzeby HTML-a:
      -- oczekuje napisów zakodowanych w ISO-8859-1 lub UTF-8 (w zależności
         od locale),
      -- zwraca napisy zakodowane w ASCII, ze znakami spoza ASCII i
         specjalnymi jako encje HTML-owe.
    Zależy od modułów: *Locale*, *Unicore*.

3. Słowniki

  3.1. Sygnatura *DICTIONARY* -- <signatures.ml>
    Sygnatura statycznych, złączalnych słowników, polimorficznych ze względu
    na typ klucza i typ skojarzonej wartości.
    Moduł o takiej sygnaturze udostępnia:
      -- typ [('a, 'b) t] słownika;
      -- funkcje dostępu: [get] (może zgłosić wyjątek Not_found), [exists];
      -- konstruktor z listy par klucz-wartość: [make];
      -- konstruktor z listy słowników: [union];
      -- funkcję odwzorowującą jeden słownik na inny: [map].

  3.2. Moduł *Dictionary* : *DICTIONARY* -- <signatures.ml>
    Implementacja oparta o drzewa BST.
    Jeżeli lista par klucz-wartość będzie posortowana, konstruktor utworzy
    drzewo idealnie zrównoważone.

  3.2. Sygnatura *LATDICT* -- <signatures.ml>
    Sygnatura zestawu słowników symboli i poleceń LaTeXa.
    Moduł o takiej sygnaturze udostępnia:
      -- wszysto to, co moduł o sygnaturze *DICTIONARY*
      -- słownik alfabetów (np. `\mathtt', `\mathbf'): [alphabets]
      -- słownik operatorów o zmiennej wielkości (np. `\sum', `bigcup'):
         [operators]
      -- słownik symboli typu log (np. `\sin', `\sup'): [loglikes]
      -- słownik symboli ograniczników (wartością jest kod Unicode):
         [delimiters]
      -- słownik wszystkich symboli (wartością jest kod Unicode):
         [symbols]
      -- słownik wszystkich poleceń (w tym symboli o nazwach zaczynających
         się od '\'; wartością jest para:
         ile_argumentów_opcjonalnych-ile_argumentów_obowiązkowych):
         [commands].

    TODO: Prawdopodobnie sensowne byłoby drobniejsze rozbicie symboli
    na kilka słowników wg pełnionych funkcji -- to umożliwiłoby automatyczne
    wstawianie odpowiednich odstępów między symbole, czego na razie brak.

  3.3. Moduł *Latex_dictionary* : *LATDICT* -- <latex_dictionary.ml>
    TODO: Wymaga wielu uzupełnień.
    Zależy od modułu *Dictionary*.

3. Analiza i interpretacja danych wejściowych

  4.1. Analiza leksykalna

    4.1.1. Sygnatury *AUTOMATON* i *LEX_AUTOMATON* -- <signatures.ml>
      Sygnatura *AUTOMATON* to sygnatura automatów skończonych.
      Moduł o takiej sygnaturze udostępnia:
        -- typ automatu [t] (z założenia abstrakcyjny),
        -- typ publicznie widocznego stanu [s],
        -- typ poleceń [command],
        -- stan domyślny: [default],
        -- funkcję dającą publicznie widoczny stan: [pubstate]
        -- funkcję ,,karmiącą'' automat poleceniem: [execute]
      Sygnatura *LEX_AUTOMATON* to sygnatura *AUTOMATON* z ukonkretnionymi
      typami: [command = char] oraz [s = bool].
      Automat o takiej sygnaturze ma służyć do rozpoznawania końca leksemu
      w ciągu znaków, którymi jest ,,karmiony''.
      Publiczny stan [true] oznacza, że poprzednio wczytany znak kończył
      leksem.

    4.1.2. Moduł *Automaton* : *LEX_AUTOMATON* -- <automaton.ml>
      Automat rozpoznający leksemy TeX-owe.

    4.1.3. Moduł *Automaton2* : *LEX_AUTOMATON* -- <automaton2.ml>
      Automat rozpoznający leksemy TeX-opodobne. Zasadniczym odstępstwem
      jest traktowanie zawsze ciągu cyfr jako całości. Zastosowanie tego
      modułu zamiast modułu *Automaton* daje niepoprawne,
      ale za to intuicyjne wyniki, takie jak ten:
      |          32                    3
      | x^32 -> x      --zamiast--    x 2

    4.1.4. Sygnatura *LEXSCAN* -- <signatures.ml>
      Prosta sygnatura modułu przeprowadzającego analizę leksykalną:
      jedyną udostępnioną funkcją jest [make], która przekształca napis
      na listę napisów (leksemów).

    4.1.5. Funktor Lexscan.Make() : *LEXSCAN* -- <lexscan.ml>
      Naturalna implementacja analizy leksykalnej przy pomocy automatu
      skończonego o sygnaturze *LEX_AUTOMATON* (parametr).

  4.2. Analiza składniowa

    4.2.1. Moduł *Parsetree* -- <parsetree.ml>
      Zawiera jedynie implementację typu [t] drzewa analizy składniowej.
      Na potrzeby modułów *Parse* i *Interpret*.

    4.2.2. Sygnatura *PARSE* -- <signatures.ml>
      Prosta sygnatyra modułu doknującego analizy składniowej.
      Moduł o takiej sygnaturze udostępnia:
        -- typ [t] drzewa analizy składniowej,
        -- wyjątek [Parse_error],
        -- funkcję [from_lexems] tej analizy dokonującej.

    4.2.3. Funktor *Parse.Make()* : *PARSE'* -- <parse.ml>
      Implementacja analizy leksykalnej przeprowadzonej przy pomocy słowników
      LaTeX-owych o sygnaturze *LATDICT* (parametr), o typie [t = Parsetree.t].
      Wyjątek [Parse_error] nie jest nigdy zgłaszany.

  4.3. Interpretacja

    4.3.1. Sygnatura *INTERPRET* -- <signatures.ml>
      Sygnatura interpretera wyniku, jaki uzyskał analizator składniowy.
      Moduł o takiej sygnaturze udostępnia:
        -- typ [t] drzewa analizy składniowej,
        -- typ wynikowy [s],
        -- funkcję przeprowadzającą konwersję: [make].
      To czym jest wynik zależy tylko od implementacji.

    4.3.2. Funktor *Interpret.Make()()()* : *INTERPRET'* -- <interpret.ml>
      Interpreter wyniku analizy składniowej. Dokonuje się jej z pomocą:
        -- modułu obsługi Unikodu (parametr) o sygnaturze *UNICODE*,
        -- słowników LaTeX-owych (parametr) o sygnaturze *LATDICT*.
      Wynikiem jest obraz utworzony przy pomocy modułu wizualizacji wzorów
      (parametr) o sygnaturze RMATH'.

    4.3.3. Funktor *Interpret_debug.Make()* : *INTERPRET'* --
           <interpret_debug.ml>
      Funkcjonalność moduł o sygnaturze *INTERPRET* (parametr) zostaje
      rozszerzona o wypisywanie na standardowe wyjście samego drzewa analizy
      składniowej.

5. Wizualizacja

  5.1. Wizualizacja abstrakcyjna
    5.1.1. Sygnatura *DECORATION* -- <signatures.ml>
      Moduł o takiej sygnaturze udostępnia:
        -- napis wstawiany na początku/końcu linii: [line_begin], [line_end]
        -- napis wstawiany na początku/końcu wzoru:
           [formula_begin], [formula_end]

    5.1.2. Moduły *Decoration*, *Decoration_ansi* i *Decoration_html* --
           <decoration.ml>, <decoration_ansi.ml>, <decoration_html.ml>

    5.1.3. Sygnatura *SIMPLE_RENDER* -- <signatures.ml>
      Sygnatura prostego wizualizatora.
      Moduł o takiej sygnaturze udostępnia:
        -- moduł [Uni] o sygnaturze *UNICODE*, z którego korzysta;
        -- typ obrazu [t];
        -- pusty obraz [empty];
        -- funkcje dające wysokość i szerokość obrazu: [width], [height];
        -- funkcję przekształcającą napis unikodowy (typu [Uni.t]) na obraz:
           [s]
        -- funkcję dokonującą wizualizacji: [render]

    5.1.4. Sygnatura *RENDER* -- <signatures.ml>
      Sygnatura wizualizatora opartego na ,,rachunku pudełkowym'':
      nowe obrazy (pudełka) uzyskujemy przez odpowiednie składanie innych
      obrazów (pudełek).
      Moduł o takiej sygnaturze udostępnia:
        -- wszystko to, co moduł o sygnaturze *SIMPLE_RENDER*;
        -- funkcję dającą pudełko o ustalonym rozmiarze, wypełnione zadanym
           znakiem unikodowym: [make]
        -- funkcję zwiększającą rozmiar pudełka poprzez rozszerzenie go
           w zadanym kierunku (kierunkach): [grow]
        -- funkcje łączące pudełka w pionie i w poziomie: [join_v], [join_v]
        -- funkcje łączące pudełka na ukos: [join_tr], [join_br]
        -- funkcję łącząca 4 pudełka w jedno (każde z pudełek w jednym
           rogu): [join4]

    5.1.5. Funktor *Render.Make()()* : *RENDER'* -- <render.ml>
      Implementacja jest dokonywana z pomocą modułów:
        -- o sygnaturze UNICODE (parametr);
        -- o sygnaturze DECORATION (parametr).

  5.2. Wizualizacja wzorów

    5.2.1. Syngatura *RMATH* -- <signatures.ml>
      Sygnatura wizualizatora wzorów matematycznych.
      Docelowo powinna pozwolić skonstruować obraz dowolnie wyszukany wzoru.
      Moduł o takiej sygnaturze udostępnia:
        -- wszystko to, co moduł o sygnaturze *SIMPLE_RENDER*;
        -- funkcję łączącą w poziomie wiele pudełek: [join_h];
        -- funkcję dostawiającą pudełko nad/pod/nad-i-pod pudełko bazowe:
           [join_top], [join_bot], [join_topbot]
           [join_topbot];
        -- funkcję dostawiającą do pudełka bazowego indeks górny/dolny/oba
           indeksy: [join_NE], [join_SE], [join_NESE];
        -- funkcje tworzące ułamek: [frac];
        -- funkcję tworzącą pierwiastek: [sqrt];
        -- TODO: oraz kilka innych operacji;
        -- funkcje tworzące duże symbole: [sum], [prod], [coprod],
           [intergral], [ointegral] (oraz wiele innych -- TODO)
        -- typy i funkcje umożliwiające tworzenie ograniczników
           dopasowanych do rozmiaru pudełka bazowego: typy [bracket_t] i
           [delimiter_t], funkcja [largedelimiter]
      Istotne jest, by w strukturze obrazu pamiętana była tzw. linia bazowa
      wzoru, dzięki czemu nie powstaną potworki w rodzaju:
      |  y       2
      | ---- +  y
      |   2    ----
      |  x      x

    5.2.2. Funktor *Rmath.Make()()* : *RMATH'* -- <rmath.ml>
      Implementacja wizualizatora wzorów korzystająca z modułu obsługi
      Unikodu o sygnaturze UNICODE (parametr), a do składania pudełek
      używającego modułu ogólnego wizualizatora o sygnaturze RENDER'.

6. Program główny -- <brightmare.ml>
  Program można (w sposób ograniczony) skłonić do wybrania odpowiedniego
  zestawu modułów poprzez podanie parametrów `--html', `--nohtml',
  `--debug'.
  Pozostałe parametry są traktowane jako wzory, które należy zwizualizować.

# vim:tw=76 et ts=2 sw=2
